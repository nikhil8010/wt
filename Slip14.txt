Js file
<!DOCTYPE html>
<html>
<head>
	<title>Teacher Details</title>
	<script src=https://code.jquery.com/jquery-3.6.0.min.js></script>
</head>
<body>
	<select id=”teacher-list”>
		<option value=””>--Select Teacher--</option>
		<option value=”1”>John Doe</option>
		<option value=”2”>Jane Smith</option>
		<option value=”3”>Bob Johnson</option>
	</select>
	<button id=”submit-btn”>Get Details</button>
	<div id=”details”></div>

	<script>
		$(document).ready(function() {
			$(‘#submit-btn’).click(function() {
				Var tno = $(‘#teacher-list’).val();
				If (tno == ‘’) {
					Alert(‘Please select a teacher.’);
					Return;
				}
				$.ajax({
					url: ‘teacherdetails.php’,
					method: ‘POST’,
					data: {tno: tno},
					success: function(response) {
						$(‘#details’).html(response);
					},
					Error: function(xhr, status, error) {
						Console.log(xhr.responseText);
					}
				});
			});
		});
	</script>
</body>
</html>

Php file teacherdetails.php

<?php
// Connect to database
$host = "localhost";
$port = "5432";
$dbname = "database_name";
$user = "username";
$password = "password";

$conn = pg_connect("host=$host port=$port dbname=$dbname user=$user password=$password");

// Check connection
if (!$conn) {
    die("Connection failed: " . pg_last_error());
}

// Retrieve selected teacher details
if (isset($_POST['tno'])) {
    $tno = $_POST['tno'];
    $sql = "SELECT * FROM teacher WHERE tno = '$tno'";
    $result = pg_query($conn, $sql);

    if (pg_num_rows($result) > 0) {
        $row = pg_fetch_assoc($result);
        echo "Teacher Name: " . $row['tname'] . "<br>";
        echo "Qualification: " . $row['qualification'] . "<br>";
        echo "Salary: " . $row['salary'] . "<br>";
    } else {
        echo "No data found.";
    }
}

// Close database connection
pg_close($conn);
?>






TID={1:[“apple”,”mango”,”banana”],2=[“mango”,”banana”, “cabbage”,”carrots”],3=[“mango”,”banana”,carrots”],4=[“mango”,”carrots”]}AAAns:

From mlxtend.preprocessing import TransactionEncoder
From mlxtend.frequent_patterns import apriori

# Create the dataset
TID = {1:[“apple”,”mango”,”banana”],
       2:[“mango”,”banana”,”cabbage”,”carrots”],
       3:[“mango”,”banana”,”carrots”],
       4:[“mango”,”carrots”]}

# Convert the categorical values into numeric format
Te = TransactionEncoder()
Te_ary = te.fit([TID[i] for i in TID]).transform([TID[i] for i in TID])
Df = pd.DataFrame(te_ary, columns=te.columns_)

# Apply the apriori algorithm with different min_sup values
Min_sup_values = [0.25, 0.5, 0.75]
For min_sup in min_sup_values:
    Frequent_itemsets = apriori(df, min_support=min_sup, use_colnames=True)
    Print(“Frequent itemsets with min_sup =”, min_sup)
    Print(frequent_itemsets)
    Print(“\n”)

